const User = require("../models/User");
const jwt = require("jsonwebtoken");
const sendEmail = require("../utils/sendEmail");
const bcrypt = require("bcryptjs");

// üîê Cr√©er un compte + envoyer un code de v√©rification
exports.register = async (req, res) => {
  try {
    const { username, email, password, service } = req.body;

    // Validation des champs
    if (!username || !email || !password) {
      return res
        .status(400)
        .json({ error: "Tous les champs sont obligatoires." });
    }

    // V√©rifie si l'email est d√©j√† utilis√© (insensible √† la casse)
    const existingUser = await User.findOne({
      email: { $regex: new RegExp(`^${email}$`, "i") },
    });
    if (existingUser) {
      return res.status(400).json({ error: "Email d√©j√† utilis√©." });
    }

    // V√©rification de la force du mot de passe
    if (password.length < 6) {
      return res.status(400).json({
        error: "Le mot de passe doit contenir au moins 6 caract√®res.",
      });
    }

    // G√©n√®re un code de v√©rification unique (6 chiffres)
    const verificationCode = Math.floor(
      100000 + Math.random() * 900000
    ).toString();

    // Hash du mot de passe avec un salt g√©n√©r√© automatiquement
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Cr√©e un nouvel utilisateur
    const user = new User({
      username,
      email: email.toLowerCase(), // Normalise l'email en minuscules
      password: hashedPassword,

      verificationCode,
      isVerified: false,
    });

    // Sauvegarde l'utilisateur
    await user.save();

    // Envoi de l'email de v√©rification
    await sendEmail(
      email,
      "V√©rification de votre compte",
      `Votre code de v√©rification est : ${verificationCode}`
    );

    // G√©n√©ration du token (comme dans le deuxi√®me code)
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "4h" }
    );

    const { password: userPassword, ...userWithoutPassword } = user._doc;

    res.status(201).json({
      ...userWithoutPassword,
      token,
      message: "Compte cr√©√© ! V√©rifiez votre email.",
    });
  } catch (error) {
    console.error("Erreur lors de l'inscription:", error);
    res.status(500).json({
      error: "Erreur serveur lors de l'inscription.",
      details: error.message,
    });
  }
};

// ‚úÖ V√©rifier le code de v√©rification
exports.verifyCode = async (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({ error: "Email et code requis." });
    }

    const user = await User.findOne({
      email: { $regex: new RegExp(`^${email}$`, "i") },
    });

    if (!user) {
      return res.status(404).json({ error: "Utilisateur non trouv√©." });
    }

    if (user.verificationCode !== code) {
      return res.status(400).json({ error: "Code incorrect." });
    }

    user.isVerified = true;
    user.verificationCode = undefined;
    await user.save();

    // G√©n√©rer un nouveau token apr√®s v√©rification
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "4h" }
    );

    const { password, ...userWithoutPassword } = user._doc;

    res.json({
      ...userWithoutPassword,
      token,
      message: "Email v√©rifi√© avec succ√®s !",
    });
  } catch (error) {
    console.error("Erreur v√©rification code:", error);
    res.status(500).json({
      error: "Erreur serveur lors de la v√©rification.",
      details: error.message,
    });
  }
};

// üîê Connexion + JWT
// üîê Connexion + JWT - Version am√©lior√©e
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Validation plus d√©taill√©e
    if (!email || !password) {
      return res.status(400).json({
        error: "Champs requis",
        details: "L'email et le mot de passe sont obligatoires",
      });
    }

    // V√©rification format email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        error: "Format email invalide",
        details: "Veuillez entrer une adresse email valide",
      });
    }

    const user = await User.findOne({ email: email.toLowerCase().trim() });

    // Messages d'erreur plus pr√©cis
    if (!user) {
      return res.status(401).json({
        error: "Authentification √©chou√©e",
        details: "Aucun compte trouv√© avec cet email",
      });
    }

    // V√©rification si le compte est d√©sactiv√©
    if (user.isActive === false) {
      return res.status(403).json({
        error: " Compte d√©sactiv√© ‚Äî contactez l‚Äôadministrateur.",
        details:
          "Votre compte a √©t√© d√©sactiv√©. Veuillez contacter l'administrateur.",
      });
    }

    const isPasswordValid = await bcrypt.compare(
      password.trim(),
      user.password
    );
    if (!isPasswordValid) {
      return res.status(401).json({
        error: "Authentification √©chou√©e",
        details: "Mot de passe incorrect",
      });
    }

    if (!user.isVerified) {
      // Envoyer un nouveau code de v√©rification si n√©cessaire
      if (!user.verificationCode) {
        user.verificationCode = Math.floor(
          100000 + Math.random() * 900000
        ).toString();
        await user.save();
        await sendEmail(
          user.email,
          "V√©rification de votre compte",
          `Votre nouveau code de v√©rification est : ${user.verificationCode}`
        );
      }

      return res.status(403).json({
        error: "Compte non v√©rifi√©",
        details: "Veuillez v√©rifier votre email",
        verificationRequired: true,
        email: user.email,
      });
    }

    // G√©n√©ration token
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "4h" }
    );

    // Mise √† jour de la derni√®re connexion
    user.lastLogin = new Date();
    await user.save();

    // R√©ponse r√©ussie
    const { password: _, ...userData } = user.toObject();
    return res.json({
      success: true,
      user: userData,
      token,
      message: "Connexion r√©ussie",
    });
  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({
      error: "Erreur serveur",
      details: "Une erreur est survenue lors de la connexion",
    });
  }
};
// üîë Mot de passe oubli√© - Envoi code de r√©initialisation
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ error: "Email requis." });
    }

    const user = await User.findOne({
      email: { $regex: new RegExp(`^${email}$`, "i") },
    });

    if (!user) {
      return res
        .status(404)
        .json({ error: "Aucun utilisateur avec cet email." });
    }

    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
    user.resetCode = resetCode;
    user.resetCodeExpires = Date.now() + 3600000; // 1 heure

    await user.save();

    await sendEmail(
      email,
      "R√©initialisation de mot de passe",
      `Votre code de r√©initialisation est : ${resetCode} (valide 1 heure)`
    );

    res.json({
      message: "Code envoy√© avec succ√®s.",
      email: email,
    });
  } catch (error) {
    console.error("Erreur mot de passe oubli√©:", error);
    res.status(500).json({
      error: "Erreur serveur lors de l'envoi du code.",
      details:
        process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
};

// ‚úÖ V√©rification du code de r√©initialisation
exports.verifyResetCode = async (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({ error: "Email et code requis." });
    }

    const user = await User.findOne({
      email: { $regex: new RegExp(`^${email}$`, "i") },
    });

    if (!user) {
      return res.status(404).json({ error: "Utilisateur non trouv√©." });
    }

    if (user.resetCode !== code || user.resetCodeExpires < Date.now()) {
      return res.status(400).json({ error: "Code invalide ou expir√©." });
    }

    res.json({
      message: "Code v√©rifi√© avec succ√®s.",
      email: email,
      resetToken: jwt.sign(
        { userId: user._id, email: user.email, resetCode: code },
        process.env.JWT_SECRET,
        { expiresIn: "15m" }
      ),
    });
  } catch (error) {
    console.error("Erreur v√©rification code reset:", error);
    res.status(500).json({
      error: "Erreur serveur lors de la v√©rification.",
      details:
        process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
};

// üîÑ R√©initialiser le mot de passe
exports.resetPassword = async (req, res) => {
  try {
    const { email, code, newPassword } = req.body;

    if (!email || !code || !newPassword) {
      return res
        .status(400)
        .json({ error: "Tous les champs sont obligatoires." });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({
        error: "Le mot de passe doit contenir au moins 6 caract√®res.",
      });
    }

    const user = await User.findOne({
      email: { $regex: new RegExp(`^${email}$`, "i") },
    });

    if (!user) {
      return res.status(404).json({ error: "Utilisateur non trouv√©." });
    }

    if (user.resetCode !== code || user.resetCodeExpires < Date.now()) {
      return res.status(400).json({ error: "Code invalide ou expir√©." });
    }

    // V√©rifier si le nouveau mot de passe est diff√©rent de l'ancien
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      return res.status(400).json({
        error: "Le nouveau mot de passe doit √™tre diff√©rent de l'ancien.",
      });
    }

    // Hash du nouveau mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetCode = undefined;
    user.resetCodeExpires = undefined;

    await user.save();

    // Envoyer un email de confirmation
    await sendEmail(
      email,
      "Mot de passe modifi√©",
      "Votre mot de passe a √©t√© modifi√© avec succ√®s."
    );

    res.json({
      message: "Mot de passe r√©initialis√© avec succ√®s !",
      email: email,
    });
  } catch (error) {
    console.error("Erreur reset password:", error);
    res.status(500).json({
      error: "Erreur serveur lors de la r√©initialisation.",
      details:
        process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
};

exports.protect = (req, res, next) => {
  // logique d'auth
  next();
};

exports.restrictTo = (...roles) => {
  return (req, res, next) => {
    // logique de restriction de r√¥le
    next();
  };
};
// authController.js
exports.protect = (req, res, next) => {
  // logique d'auth
  next();
};

exports.restrictTo = (...roles) => {
  return (req, res, next) => {
    // logique de restriction de r√¥le
    next();
  };
};
exports.logout = async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) {
      return res.status(400).json({ message: "Token manquant" });
    }

    // V√©rifier et d√©coder le token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;

    // Mettre √† jour la date de d√©connexion
    await User.findByIdAndUpdate(userId, { lastLogin: new Date() });

    res.status(200).json({ message: "D√©connexion r√©ussie" });
  } catch (error) {
    console.error("Erreur lors de la d√©connexion :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
